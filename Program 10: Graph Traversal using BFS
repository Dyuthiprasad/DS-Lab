#include <stdio.h>
#include <stdlib.h>

typedef struct Node {
	int vertex;
	struct Node* next;
} Node;
typedef struct Graph {
	int numVertices;
	Node** adjLists;
	int* visited;
} Graph;
typedef struct Queue {
	int items[100];
	int front, rear;
} Queue;
Node* createNode(int vertex) {
	Node* newNode = (Node*)malloc(sizeof(Node));
	newNode->vertex = vertex;
	newNode->next = NULL;
	return newNode;
}
Graph* createGraph(int vertices) {
	Graph* graph = (Graph*)malloc(sizeof(Graph));
	graph->numVertices = vertices;
	graph->adjLists = (Node**)malloc(vertices * sizeof(Node*));
	graph->visited = (int*)malloc(vertices * sizeof(int));

	for (int i = 0; i < vertices; i++) {
    	graph->adjLists[i] = NULL;
    	graph->visited[i] = 0;
	}

	return graph;
}
void addEdge(Graph* graph, int src, int dest) {
	Node* newNode = createNode(dest);
	newNode->next = graph->adjLists[src];
	graph->adjLists[src] = newNode;
	newNode = createNode(src);
	newNode->next = graph->adjLists[dest];
	graph->adjLists[dest] = newNode;
}
Queue* createQueue() {
	Queue* q = (Queue*)malloc(sizeof(Queue));
	q->front = -1;
	q->rear = -1;
	return q;
}
int isEmpty(Queue* q) {
	return q->rear == -1;
}
void enqueue(Queue* q, int value) {
	if (q->rear == 99)
    	return;
	if (q->front == -1)
    	q->front = 0;
	q->items[++q->rear] = value;
}
int dequeue(Queue* q) {
	if (isEmpty(q))
    	return -1;
	int item = q->items[q->front++];
	if (q->front > q->rear)
    	q->front = q->rear = -1;
	return item;
}
void bfs(Graph* graph, int startVertex) {
	Queue* q = createQueue();

	graph->visited[startVertex] = 1;
	enqueue(q, startVertex);

	printf("BFS Traversal: ");
	while (!isEmpty(q)) {
    	int currentVertex = dequeue(q);
    	printf("%d ", currentVertex);

    	Node* temp = graph->adjLists[currentVertex];
    	while (temp) {
        	int adjVertex = temp->vertex;

        	if (!graph->visited[adjVertex]) {
            	graph->visited[adjVertex] = 1;
            	enqueue(q, adjVertex);
        	}
        	temp = temp->next;
    	}
	}
	printf("\n");
}

int main() {
	int vertices = 5;
	Graph* graph = createGraph(vertices);
	addEdge(graph, 0, 1);
	addEdge(graph, 0, 2);
	addEdge(graph, 1, 3);
	addEdge(graph, 1, 4);
	bfs(graph, 0);
	return 0;
}
