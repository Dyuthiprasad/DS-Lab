#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <string.h>
#define MAX 100
char stack[MAX];
int top = -1;
int isEmpty() {
    return top == -1;
}
int isFull() {
    return top == MAX - 1;
}
void push(char value) {
    if (isFull()) {
        printf("Stack overflow\n");
        exit(1);
    }
    stack[++top] = value;
}
char pop() {
    if (isEmpty()) {
        printf("Stack underflow\n");
        exit(1);
    }
    return stack[top--];
}
char peek() {
    if (isEmpty()) {
        return '\0';
    }
    return stack[top];
}
int precedence(char op) {
    switch (op) {
        case '+':
        case '-': return 1;
        case '*':
        case '/': return 2;
        default: return 0;
    }
}
void infixToPostfix(const char *infix, char *postfix) {
    int i = 0, j = 0;
    char ch;

    while ((ch = infix[i++]) != '\0') {
        if (isalnum(ch)) {
            postfix[j++] = ch;
        } else if (ch == '(') {
            // Push '(' onto stack
            push(ch);
        } else if (ch == ')') {
            while (!isEmpty() && peek() != '(') {
                postfix[j++] = pop();
            }
            if (!isEmpty() && peek() == '(') {
                pop(); 
            } else {
                printf("Invalid expression\n");
                exit(1);
            }
        } else{
            while (!isEmpty() && precedence(peek()) >= precedence(ch)) {
                postfix[j++] = pop();
            }
            push(ch);
        }
    }
    while (!isEmpty()) {
        if (peek() == '(') {
            printf("Invalid expression\n");
            exit(1);
        }
        postfix[j++] = pop();
    }

    postfix[j] = '\0'; 
}

int main() {
    char infix[MAX], postfix[MAX];

    printf("Enter a valid parenthesized infix expression: ");
    scanf("%s", infix);

    infixToPostfix(infix, postfix);

    printf("Postfix expression: %s\n", postfix);

    return 0;
}
